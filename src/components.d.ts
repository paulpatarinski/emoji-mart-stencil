/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  EmojiProps,
} from './components/emoji/emojiProps';

declare global {

  namespace StencilComponents {
    interface EmartAnchors {
      'categories': any[];
      'color': any;
      'i18n': any;
      'onAnchorClick': any;
    }
  }

  interface HTMLEmartAnchorsElement extends StencilComponents.EmartAnchors, HTMLStencilElement {}

  var HTMLEmartAnchorsElement: {
    prototype: HTMLEmartAnchorsElement;
    new (): HTMLEmartAnchorsElement;
  };
  interface HTMLElementTagNameMap {
    'emart-anchors': HTMLEmartAnchorsElement;
  }
  interface ElementTagNameMap {
    'emart-anchors': HTMLEmartAnchorsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'emart-anchors': JSXElements.EmartAnchorsAttributes;
    }
  }
  namespace JSXElements {
    export interface EmartAnchorsAttributes extends HTMLAttributes {
      'categories'?: any[];
      'color'?: any;
      'i18n'?: any;
      'onAnchorClick'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface EmartCategory {
      'categoryId': any;
      'categoryKey': any;
      'categoryLoaded': any;
      'custom': any;
      'emojiProps': any;
      'emojis': any;
      'emojisToShowFilter': any;
      'forceUpdate': () => void;
      'getTop': () => number;
      'handleScroll': (scrollTop: any) => boolean;
      'hasStickyPosition': boolean;
      'i18n': any;
      'memoizeSize': () => void;
      'name': string;
      'native': boolean;
      'perLine': number;
      'recent': string[];
      'updateDisplay': (display: any) => void;
    }
  }

  interface HTMLEmartCategoryElement extends StencilComponents.EmartCategory, HTMLStencilElement {}

  var HTMLEmartCategoryElement: {
    prototype: HTMLEmartCategoryElement;
    new (): HTMLEmartCategoryElement;
  };
  interface HTMLElementTagNameMap {
    'emart-category': HTMLEmartCategoryElement;
  }
  interface ElementTagNameMap {
    'emart-category': HTMLEmartCategoryElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'emart-category': JSXElements.EmartCategoryAttributes;
    }
  }
  namespace JSXElements {
    export interface EmartCategoryAttributes extends HTMLAttributes {
      'categoryId'?: any;
      'categoryKey'?: any;
      'categoryLoaded'?: any;
      'custom'?: any;
      'emojiProps'?: any;
      'emojis'?: any;
      'emojisToShowFilter'?: any;
      'hasStickyPosition'?: boolean;
      'i18n'?: any;
      'name'?: string;
      'native'?: boolean;
      'perLine'?: number;
      'recent'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface EmartEmoji {
      'backgroundImageFn': any;
      'emoji': any;
      'fallback': any;
      'forceSize': any;
      'html': any;
      'native': any;
      'onClick': any;
      'onLeave': any;
      'onLoaded': any;
      'onOver': any;
      'set': any;
      'sheetSize': any;
      'size': number;
      'skin': any;
      'tooltip': any;
    }
  }

  interface HTMLEmartEmojiElement extends StencilComponents.EmartEmoji, HTMLStencilElement {}

  var HTMLEmartEmojiElement: {
    prototype: HTMLEmartEmojiElement;
    new (): HTMLEmartEmojiElement;
  };
  interface HTMLElementTagNameMap {
    'emart-emoji': HTMLEmartEmojiElement;
  }
  interface ElementTagNameMap {
    'emart-emoji': HTMLEmartEmojiElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'emart-emoji': JSXElements.EmartEmojiAttributes;
    }
  }
  namespace JSXElements {
    export interface EmartEmojiAttributes extends HTMLAttributes {
      'backgroundImageFn'?: any;
      'emoji'?: any;
      'fallback'?: any;
      'forceSize'?: any;
      'html'?: any;
      'native'?: any;
      'onClick'?: any;
      'onLeave'?: any;
      'onLoaded'?: any;
      'onOver'?: any;
      'set'?: any;
      'sheetSize'?: any;
      'size'?: number;
      'skin'?: any;
      'tooltip'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface EmartPicker {
      'autoFocus': boolean;
      'backgroundImageFn': any;
      'clearSearch': () => void;
      'color': string;
      'custom': any;
      'emoji': string;
      'emojiSize': number;
      'emojiTooltip': any;
      'emojisToShowFilter': any;
      'exclude': any;
      'i18n': any;
      'include': any;
      'native': any;
      'onEmojiClicked': any;
      'perLine': number;
      'pickerStyle': any;
      'recent': any;
      'resetScroll': () => void;
      'set': string;
      'sheetSize': any;
      'showAnchors': boolean;
      'showPreview': boolean;
      'skin': any;
      'title': string;
      'width': string;
    }
  }

  interface HTMLEmartPickerElement extends StencilComponents.EmartPicker, HTMLStencilElement {}

  var HTMLEmartPickerElement: {
    prototype: HTMLEmartPickerElement;
    new (): HTMLEmartPickerElement;
  };
  interface HTMLElementTagNameMap {
    'emart-picker': HTMLEmartPickerElement;
  }
  interface ElementTagNameMap {
    'emart-picker': HTMLEmartPickerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'emart-picker': JSXElements.EmartPickerAttributes;
    }
  }
  namespace JSXElements {
    export interface EmartPickerAttributes extends HTMLAttributes {
      'autoFocus'?: boolean;
      'backgroundImageFn'?: any;
      'color'?: string;
      'custom'?: any;
      'emoji'?: string;
      'emojiSize'?: number;
      'emojiTooltip'?: any;
      'emojisToShowFilter'?: any;
      'exclude'?: any;
      'i18n'?: any;
      'include'?: any;
      'native'?: any;
      'onEmojiClicked'?: any;
      'perLine'?: number;
      'pickerStyle'?: any;
      'recent'?: any;
      'set'?: string;
      'sheetSize'?: any;
      'showAnchors'?: boolean;
      'showPreview'?: boolean;
      'skin'?: any;
      'title'?: string;
      'width'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface EmartPreview {
      'emoji': any;
      'emojiProps': EmojiProps;
      'idleEmoji': string;
      'skinsProps': object;
      'title': string;
    }
  }

  interface HTMLEmartPreviewElement extends StencilComponents.EmartPreview, HTMLStencilElement {}

  var HTMLEmartPreviewElement: {
    prototype: HTMLEmartPreviewElement;
    new (): HTMLEmartPreviewElement;
  };
  interface HTMLElementTagNameMap {
    'emart-preview': HTMLEmartPreviewElement;
  }
  interface ElementTagNameMap {
    'emart-preview': HTMLEmartPreviewElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'emart-preview': JSXElements.EmartPreviewAttributes;
    }
  }
  namespace JSXElements {
    export interface EmartPreviewAttributes extends HTMLAttributes {
      'emoji'?: any;
      'emojiProps'?: EmojiProps;
      'idleEmoji'?: string;
      'skinsProps'?: object;
      'title'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface EmartSearch {
      'autoFocus': boolean;
      'clear': () => void;
      'custom': any;
      'emojisToShowFilter': any;
      'exclude': any;
      'i18n': any;
      'include': any;
      'maxResults': number;
      'onSearch': any;
    }
  }

  interface HTMLEmartSearchElement extends StencilComponents.EmartSearch, HTMLStencilElement {}

  var HTMLEmartSearchElement: {
    prototype: HTMLEmartSearchElement;
    new (): HTMLEmartSearchElement;
  };
  interface HTMLElementTagNameMap {
    'emart-search': HTMLEmartSearchElement;
  }
  interface ElementTagNameMap {
    'emart-search': HTMLEmartSearchElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'emart-search': JSXElements.EmartSearchAttributes;
    }
  }
  namespace JSXElements {
    export interface EmartSearchAttributes extends HTMLAttributes {
      'autoFocus'?: boolean;
      'custom'?: any;
      'emojisToShowFilter'?: any;
      'exclude'?: any;
      'i18n'?: any;
      'include'?: any;
      'maxResults'?: number;
      'onSearch'?: any;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;